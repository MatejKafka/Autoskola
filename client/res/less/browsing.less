@import "./mixins";
@import "./variables";

.browsing, .browseEvaluatedSession {
	.questionView.browsingMode {
		@animationDuration: 0.5s;

		.processColor(@color) {
			&.currentQuestion {
				color: darken(@color, 45%);
			}
			a {
				color: darken(@color, 25%);
			}
		}

		.questionList {
			.correctQuestion {
				.processColor(darken(@correctAnswerColor, 5%));
			}
			.incorrectQuestion {
				.processColor(@incorrectAnswerColor);
			}
		}

		&.showResults {
			.questionList {
				.unansweredQuestion {
					.processColor(@unansweredColor);
				}
			}
		}

		.answerList {
			.clickedAnswer {
				cursor: default;
				.borderBlock()
			}
		}

		.textAnswerList {
			@keyframes incorrectAnswerAnimation {
				0% {
					background-color: @incorrectAnswerColor;
				}
				100% {
					text-decoration: line-through;
					color: grey;
				}
			}

			.correctAnswer {
				.borderBlock(@correctAnswerColor);
			}

			.incorrectAnswer {
				animation: incorrectAnswerAnimation @animationDuration linear;
				text-decoration: line-through;
				color: grey;
			}

			.incorrectWithoutAnimationAnswer {
				text-decoration: line-through;
				color: grey;
			}

			// highlight for correct answer of unanswered question
			.correctUnansweredAnswer {
				.borderBlock(@unansweredColor);
			}
		}

		.imgAnswerList {
			@finalIncorrectBgColor: darken(lightgrey, 10%);
			@keyframes incorrectAnswerAnimationForImg {
				0% {
					background-color: @incorrectAnswerColor;
				}
				100% {
					background-color: @finalIncorrectBgColor;
				}
			}

			.correctAnswer {
				.setImgAnswerColor(@correctAnswerColor);
			}

			.incorrectAnswer {
				.answerImageCover {
					animation: incorrectAnswerAnimationForImg @animationDuration linear;
					background-color: @finalIncorrectBgColor;
				}
			}

			.incorrectWithoutAnimationAnswer {
				.answerImageCover {
					background-color: @finalIncorrectBgColor;
				}
			}

			.correctUnansweredAnswer {
				.setImgAnswerColor(@unansweredColor);
			}
		}
	}
}