// Generated by CoffeeScript 1.11.1
(function() {
  var fs, logger;

  fs = require('fs');

  logger = global.logger.getChildLogger('webserver/api');

  module.exports = function(req, res, next, store) {
    var collection, i, id, ids, len, path, pathArr, result, resultLength;
    pathArr = req.path.split('/').slice(1);
    if (pathArr.length === 1 || (pathArr.length === 2 && pathArr[1] === '')) {
      res.sendFile(__dirname + '/apiHelp.txt');
      return;
    }
    path = pathArr.slice(1).join('/');
    if (req.query.id != null) {
      ids = req.query.id.split(',').map(function(str) {
        return parseInt(str.trim(), 10);
      }).filter(function(n) {
        return !isNaN(n);
      });
    } else {
      ids = null;
    }
    logger.log('idParsed', 'ID query parsed', {
      reqId: req.id,
      parsedIds: ids
    });
    switch (path) {
      case 'getSection':
      case 'getSection/':
        collection = store.sections;
        break;
      case 'getQuestion':
      case 'getQuestion/':
        collection = store.questions;
        break;
      default:
        logger.log('endpointResolved', 'Invalid endpoint: `' + path + '`', {
          reqId: req.id,
          apiEndpoint: path,
          validEndpoint: false
        });
        next();
        return;
    }
    logger.log('endpointResolved', 'Requesting `' + path + '`', {
      reqId: req.id,
      apiEndpoint: path,
      validEndpoint: true
    });
    if ((ids != null) && ids.length === 0) {
      logger.log('incorrectQueryFormat', 'Request had incorrect query ID format: `' + req.query.id + '`', {
        reqId: req.id,
        idQuery: req.query.id
      });
      res.sendStatus(400);
      return;
    }
    if (ids == null) {
      result = collection.get();
    } else if (ids.length === 1) {
      result = collection.get(ids[0]);
    } else {
      result = [];
      for (i = 0, len = ids.length; i < len; i++) {
        id = ids[i];
        result.push(collection.get(id));
      }
    }
    if (Array.isArray(result)) {
      resultLength = result.length;
    } else {
      resultLength = 1;
    }
    logger.log('resultRetrieved', 'Retrieved result: ' + resultLength + ' items', {
      reqId: req.id,
      resultLength: resultLength
    });
    return res.json(result);
  };

}).call(this);

//# sourceMappingURL=handleApiCall.js.map
