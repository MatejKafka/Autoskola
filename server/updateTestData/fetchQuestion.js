// Generated by CoffeeScript 1.11.1
(function() {
  var jsdom, request, url, urls;

  urls = require('./urls');

  request = require('request');

  jsdom = require('jsdom');

  url = require('url');

  module.exports = function(arg) {
    var correctAnswers, id;
    id = arg.id, correctAnswers = arg.correctAnswers;
    console.log('fetching question ' + id);
    return new Promise(function(resolve, reject) {
      return request.post(urls.question, {
        form: {
          id: id
        }
      }, function(err, response, body) {
        if (err != null) {
          reject(err);
          return;
        }
        if (response.statusCode !== 200) {
          reject(new Error('Invalid status code returned while retrieving section: ' + response.statusCode));
          return;
        }
        return jsdom.env(body, function(err, window) {
          var answers, i, img, imgElem, imgFrame, imgUrl, imgWrapper, letter, options, questionText;
          if (err != null) {
            reject(err);
            return;
          }
          questionText = window.document.getElementsByClassName('question-text')[0].innerHTML.trim();
          if (questionText === '') {
            questionText = window.document.getElementsByClassName('question-text')[1].innerHTML.trim();
            img = null;
          } else {
            imgFrame = window.document.getElementsByClassName('image-frame')[0];
            if (imgFrame.children.length === 1) {
              imgElem = imgFrame.children[0];
              if (imgElem.src != null) {
                img = {
                  type: 'img',
                  url: imgElem.src
                };
              } else {
                img = {
                  type: 'flash',
                  url: imgElem.data
                };
              }
              img.url = url.resolve(urls.question, img.url);
            } else if (imgFrame.children.length === 3) {
              options = (function() {
                var j, len, ref, results;
                ref = imgFrame.children;
                results = [];
                for (i = j = 0, len = ref.length; j < len; i = ++j) {
                  imgWrapper = ref[i];
                  imgUrl = imgWrapper.children[0].src;
                  imgUrl = url.resolve(urls.question, imgUrl);
                  letter = String.fromCharCode(97 + i);
                  results.push({
                    url: imgUrl,
                    letter: letter
                  });
                }
                return results;
              })();
              img = {
                type: 'multiple',
                options: options
              };
            } else {
              throw new Error('Unknown image frame format (qId: ' + id + ')');
            }
          }
          answers = Array.from(window.document.getElementsByClassName('answer')).map(function(answerElem, i) {
            var answerId, answerText, isCorrectAnswer;
            answerId = parseInt(answerElem.getAttribute('data-answerid'));
            letter = String.fromCharCode(97 + i);
            answerText = answerElem.children[1].innerHTML.trim();
            isCorrectAnswer = correctAnswers.indexOf(answerId) > -1;
            return {
              text: answerText,
              letter: letter,
              correct: isCorrectAnswer
            };
          });
          console.log('fetched question ' + id);
          return resolve({
            id: id,
            question: {
              text: questionText,
              img: img
            },
            answers: answers
          });
        });
      });
    });
  };

}).call(this);

//# sourceMappingURL=fetchQuestion.js.map
