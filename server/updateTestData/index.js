// Generated by CoffeeScript 1.11.1
(function() {
  var config, dataStoreDir, delayPromise, fetchQuestion, fetchSection, fetchSectionList, fs, path, questionFilePath, sectionFilePath, sectionFilterFn;

  config = require('../config');

  path = require('path');

  fs = require('fs');

  fetchSectionList = require('./fetchSectionList');

  fetchSection = require('./fetchSection');

  fetchQuestion = require('./fetchQuestion');

  sectionFilterFn = function(section) {
    return [15, 18, 23].indexOf(section.id) < 0;
  };

  delayPromise = function(fn, delay) {
    return new Promise(function(resolve) {
      return setTimeout(function() {
        return resolve(fn());
      }, delay);
    });
  };

  dataStoreDir = config.dataStoreDirPath;

  sectionFilePath = path.resolve(dataStoreDir, 'sections.json');

  questionFilePath = path.resolve(dataStoreDir, 'questions.json');

  fetchSectionList()["catch"](function(err) {
    console.error('ERROR OCCURRED WHILE LOADING SECTION LIST');
    console.error(err.stack);
    return process.exit(1);
  }).then(function(sectionList) {
    var section, sectionPromises;
    sectionList = sectionList.filter(sectionFilterFn);
    sectionPromises = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = sectionList.length; j < len; j++) {
        section = sectionList[j];
        results.push(fetchSection(section));
      }
      return results;
    })();
    return Promise.all(sectionPromises);
  })["catch"](function(err) {
    console.error('ERROR OCCURRED WHILE LOADING SECTIONS');
    console.error(err.stack);
    return process.exit(1);
  }).then(function(sections) {
    var i, j, k, len, len1, question, questionIds, questionPromises, questions, ref, section, sectionQuestionIds;
    questionIds = {};
    questions = [];
    for (j = 0, len = sections.length; j < len; j++) {
      section = sections[j];
      sectionQuestionIds = [];
      ref = section.questions;
      for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
        question = ref[i];
        if (questionIds[question.id] == null) {
          questionIds[question.id] = true;
          questions.push(question);
        }
        sectionQuestionIds.push(question.id);
      }
      section.questions = sectionQuestionIds;
    }
    fs.writeFileSync(sectionFilePath, JSON.stringify(sections));
    console.log('SAVED UPDATED SECTIONS');
    questionPromises = (function() {
      var l, len2, results;
      results = [];
      for (i = l = 0, len2 = questions.length; l < len2; i = ++l) {
        question = questions[i];
        results.push((function(question, i) {
          return delayPromise((function() {
            return fetchQuestion(question);
          }), 25 * i);
        })(question, i));
      }
      return results;
    })();
    return Promise.all(questionPromises);
  })["catch"](function(err) {
    console.error('ERROR OCCURRED WHILE LOADING QUESTIONS');
    console.error(err.stack);
    return process.exit(1);
  }).then(function(questions) {
    fs.writeFileSync(questionFilePath, JSON.stringify(questions));
    console.log('SAVED UPDATED QUESTIONS');
    return console.log('UPDATE FINISHED');
  });

}).call(this);

//# sourceMappingURL=index.js.map
