// Generated by CoffeeScript 1.11.1
(function() {
  var ReadOnlyCollection, TestDataStore, fs, logger, path,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  path = require('path');

  fs = require('fs');

  ReadOnlyCollection = require('./ReadOnlyCollection');

  logger = global.logger.getChildLogger('testDataStore');

  module.exports = TestDataStore = (function() {
    function TestDataStore(dataStoreDir) {
      this._loadQuestions = bind(this._loadQuestions, this);
      this._loadSections = bind(this._loadSections, this);
      var questionFile, sectionFile;
      sectionFile = path.resolve(dataStoreDir, 'sections.json');
      questionFile = path.resolve(dataStoreDir, 'questions.json');
      this._loadSections(sectionFile);
      this._loadQuestions(questionFile);
      this._watchResource(sectionFile, this._loadSections);
      this._watchResource(questionFile, this._loadQuestions);
      logger.log('Test data loaded');
    }

    TestDataStore.prototype._loadSections = function(sectionFilePath, reload) {
      if (reload == null) {
        reload = false;
      }
      this.sections = this._loadTestDataPart(sectionFilePath);
      return logger.log('Sections ' + (reload ? 're' : '') + 'loaded', this.sections.length);
    };

    TestDataStore.prototype._loadQuestions = function(questionFilePath, reload) {
      if (reload == null) {
        reload = false;
      }
      this.questions = this._loadTestDataPart(questionFilePath);
      return logger.log('Questions ' + (reload ? 're' : '') + 'loaded', this.questions.length);
    };

    TestDataStore.prototype._watchResource = function(filePath, callback) {
      return fs.watch(filePath, function() {
        return callback(filePath, true);
      });
    };

    TestDataStore.prototype._loadTestDataPart = function(filePath) {
      var testDataStr;
      try {
        testDataStr = fs.readFileSync(filePath);
        return new ReadOnlyCollection(JSON.parse(testDataStr));
      } catch (error) {
        logger.log('No valid file found at ' + filePath, {
          filePath: filePath
        });
        return new ReadOnlyCollection([]);
      }
    };

    return TestDataStore;

  })();

}).call(this);

//# sourceMappingURL=TestDataStore.js.map
