// Generated by CoffeeScript 1.11.1
(function() {
  var Logger, fs, joinPaths, parseArgs;

  fs = require('fs');

  parseArgs = function(args) {
    var message, msgData, path;
    path = null;
    message = null;
    msgData = null;
    if (args.length === 1) {
      if (typeof args[0] === 'string') {
        message = args[0];
      } else {
        msgData = args[0];
      }
    }
    if (args.length === 2) {
      if (typeof args[1] === 'string') {
        path = args[0];
        message = args[1];
      } else {
        message = args[0];
        msgData = args[1];
      }
    }
    if (args.length === 3) {
      path = args[0];
      message = args[1];
      msgData = args[2];
    }
    return {
      path: path,
      message: message,
      msgData: msgData
    };
  };

  joinPaths = function(path1, path2) {
    if (path2 == null) {
      return path1;
    }
    if (path1.slice(-1) !== '/') {
      path1 += '/';
    }
    if (path2[0] === '/') {
      path2 = path2.slice(1);
    }
    return path1 + path2;
  };

  module.exports = Logger = (function() {
    function Logger(pathOrParentLogger, currentLogBranch) {
      var err;
      if (currentLogBranch == null) {
        currentLogBranch = '';
      }
      this._currentLogBranch = currentLogBranch;
      if (typeof pathOrParentLogger === 'string') {
        this._logPath = pathOrParentLogger;
        try {
          this._writeStream = fs.createWriteStream(this._logPath, {
            flags: 'a'
          });
        } catch (error) {
          err = error;
          throw new Error('Could not open logger write stream: ' + err.message);
        }
      } else {
        this._parentLogger = pathOrParentLogger;
      }
    }

    Logger.prototype.getChildLogger = function(additionalLogPath) {
      return new Logger(this, joinPaths(this._currentLogBranch, additionalLogPath));
    };

    Logger.prototype._writeLog = function(type, path, message, msgData) {
      if (this._parentLogger != null) {
        this._parentLogger._writeLog(type, path, message, msgData);
        return;
      }
      this._writeStream.write('\n' + JSON.stringify({
        type: type,
        path: path,
        message: message,
        msgData: msgData
      }));
    };

    Logger.prototype.log = function(path, message, msgData) {
      var ref;
      ref = parseArgs(arguments), path = ref.path, message = ref.message, msgData = ref.msgData;
      path = joinPaths(this._currentLogBranch, path);
      this._writeLog('log', path, message, msgData);
    };

    Logger.prototype.warn = function(path, message, msgData) {
      var ref;
      ref = parseArgs(arguments), path = ref.path, message = ref.message, msgData = ref.msgData;
      path = joinPaths(this._currentLogBranch, path);
      this._writeLog('warn', path, message, msgData);
    };

    Logger.prototype.err = function() {
      return this.error.apply(this, arguments);
    };

    Logger.prototype.error = function(path, message, err) {
      var errObj, i, key, len, msgData, ref, ref1;
      ref = parseArgs(arguments), path = ref.path, message = ref.message, msgData = ref.msgData;
      path = joinPaths(this._currentLogBranch, path);
      err = msgData;
      errObj = {};
      ref1 = Object.getOwnPropertyNames(err);
      for (i = 0, len = ref1.length; i < len; i++) {
        key = ref1[i];
        errObj[key] = err[key];
      }
      this._writeLog('error', path, message, errObj);
    };

    return Logger;

  })();

}).call(this);

//# sourceMappingURL=index.js.map
