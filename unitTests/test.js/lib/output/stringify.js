// Generated by CoffeeScript 1.8.0
(function() {
  var INDENT_CHAR, Promise, addPart, stringifyChanges, stringifyErrors, stringifyRawResult;

  require('./colors');

  Promise = require('promise');

  INDENT_CHAR = '    ';

  addPart = function(add, obj) {
    var fn;
    return fn = function(propName, type) {
      var item, _i, _len, _ref;
      if (type == null) {
        type = 'basic';
      }
      if (obj[propName].length > 0) {
        add(2, (propName.toUpperCase() + ':').heading3);
        _ref = obj[propName];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          add(3, item[type]);
        }
      }
      return fn;
    };
  };

  stringifyRawResult = function(add, rawResult) {
    var fileResult, _i, _len, _results;
    if (rawResult.length > 0) {
      add(0, '');
      add(0, 'TEST RESULT:'.heading);
      _results = [];
      for (_i = 0, _len = rawResult.length; _i < _len; _i++) {
        fileResult = rawResult[_i];
        add(1, ('FILE: '.heading2 + fileResult.file).heading2);
        _results.push(addPart(add, fileResult.state)('success', 'success')('failure', 'error'));
      }
      return _results;
    }
  };

  stringifyChanges = function(add, changes) {
    var fileTestChanges, _i, _len, _results;
    if (changes.length > 0) {
      add(0, '');
      add(0, 'CHANGES:'.heading);
      _results = [];
      for (_i = 0, _len = changes.length; _i < _len; _i++) {
        fileTestChanges = changes[_i];
        add(1, ('FILE: ' + fileTestChanges.file).heading2);
        _results.push(addPart(add, fileTestChanges.changes)('success', 'success')('failure', 'error')('added')('removed'));
      }
      return _results;
    }
  };

  stringifyErrors = function(add, errors) {
    var error, _i, _len, _results;
    if (errors.length > 0) {
      add(0, '');
      add(0, 'ERRORS:'.heading);
      _results = [];
      for (_i = 0, _len = errors.length; _i < _len; _i++) {
        error = errors[_i];
        add(1, ('FILE: ' + error.file).heading2);
        _results.push(add(2, error.error.message.error));
      }
      return _results;
    }
  };

  module.exports = function(outputData) {
    return new Promise(function(resolve) {
      var add, str_repeat, textOutputArr;
      textOutputArr = [];
      str_repeat = function(times, char) {
        return new Array(times + 1).join(char);
      };
      add = function(indentation, text) {
        var indent;
        indent = str_repeat(indentation, INDENT_CHAR);
        return textOutputArr.push(indent + text);
      };
      stringifyRawResult(add, outputData.all);
      stringifyChanges(add, outputData["new"]);
      stringifyErrors(add, outputData.errors);
      add(0, '');
      return outputData.writePromise.then(function() {
        return add(0, 'Current test result written to file');
      }, function(error) {
        return add(0, error.message);
      }).then(function() {
        return resolve(textOutputArr.join('\n'));
      });
    });
  };

}).call(this);
