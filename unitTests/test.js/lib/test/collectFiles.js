// Generated by CoffeeScript 1.8.0
(function() {
  var Promise, capitaliseFirstLetter, file, fileExists, fileStat, fs, readDir, recurse;

  fs = require('fs');

  Promise = require('promise');

  capitaliseFirstLetter = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  fileStat = Promise.denodeify(fs.stat);

  readDir = Promise.denodeify(fs.readdir);

  fileExists = function(path) {
    return new Promise(function(fulfill, reject) {
      return fs.exists(path, function(exists) {
        if (exists) {
          return fulfill();
        } else {
          return reject();
        }
      });
    });
  };

  file = function(filePath) {
    return {
      is: function(property) {
        return fileStat(filePath).then(function(stats) {
          if (stats['is' + capitaliseFirstLetter(property)]()) {
            return Promise.resolve();
          } else {
            return Promise.reject();
          }
        });
      }
    };
  };

  recurse = function(path) {
    return readDir(path).then(function(fileList) {
      if (fileList.length === 0) {
        return [];
      }
      return new Promise(function(resolve) {
        var doneCounter, fileName, length, nextDone, result, _fn, _i, _len;
        doneCounter = 0;
        length = fileList.length;
        nextDone = function() {
          doneCounter++;
          if (doneCounter === length) {
            return resolve(result);
          }
        };
        result = [];
        _fn = function() {
          var filePath;
          filePath = path + '/' + fileName;
          file(filePath).is('directory').then(function() {
            return recurse(filePath).then(function(files) {
              result = result.concat(files);
              return nextDone();
            });
          });
          return file(filePath).is('file').then(function() {
            result.push(filePath);
            return nextDone();
          });
        };
        for (_i = 0, _len = fileList.length; _i < _len; _i++) {
          fileName = fileList[_i];
          _fn();
        }
      });
    });
  };

  module.exports = function(basePath) {
    return new Promise(function(resolve, reject) {
      return fileExists(basePath).then(function() {
        return recurse(basePath).then(resolve, reject);
      }, function() {
        return resolve([]);
      });
    });
  };

}).call(this);
