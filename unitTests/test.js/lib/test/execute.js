// Generated by CoffeeScript 1.8.0
(function() {
  var MESSAGES, Promise, f_getTargetPath, f_testFn, fileExists, fs, hasJsExtension, recurse, validateTestOutput;

  Promise = require('promise');

  fs = require('fs');

  recurse = require('./collectFiles');

  f_testFn = require('./f_testFn');

  MESSAGES = {
    resultNotObject: 'Test must return object',
    badResultFormat: 'Test must return object with properties `success` and `failure`',
    notArray: '`success` and `failure` properties of test result must be arrays'
  };

  fileExists = function(path) {
    return new Promise(function(fulfill, reject) {
      return fs.exists(path, function(exists) {
        if (exists) {
          return fulfill();
        } else {
          return reject();
        }
      });
    });
  };

  hasJsExtension = function(filePath) {
    var extension, fileName, lastSlashPosition, split;
    lastSlashPosition = filePath.lastIndexOf('/');
    if (lastSlashPosition === -1) {
      lastSlashPosition = 0;
    }
    fileName = filePath.substr(lastSlashPosition);
    split = fileName.split('.');
    if (split.length > 1) {
      extension = split.pop();
      return extension === 'js' || extension === 'node';
    } else {
      return false;
    }
  };

  f_getTargetPath = function(cutPath, targetPath) {
    var cutPosition;
    cutPosition = cutPath.length;
    return function(filePath) {
      return targetPath + filePath.substr(cutPosition);
    };
  };

  validateTestOutput = function(output) {
    if (typeof output !== 'object') {
      return Promise.reject(new Error(MESSAGES.resultNotObject));
    }
    if ((output.success == null) || (output.failure == null)) {
      return Promise.reject(new Error(MESSAGES.badResultFormat));
    }
    if (!Array.isArray(output.success) || !Array.isArray(output.failure)) {
      return Promise.reject(new Error(MESSAGES.notArray));
    }
    return Promise.resolve(output);
  };

  module.exports = function(testPath, scriptPath) {
    return new Promise(function(resolve) {
      return recurse(testPath).then(function(files) {
        var doneCounter, getTargetPath, length, nextDone, result, tmp_filePath, _fn, _i, _len;
        result = [];
        getTargetPath = f_getTargetPath(testPath, scriptPath);
        doneCounter = 0;
        length = files.length;
        nextDone = function() {
          doneCounter++;
          if (doneCounter === length) {
            return resolve(result);
          }
        };
        result = [];
        _fn = function() {
          var filePath, pushToResult, targetPath;
          pushToResult = function(error, testResult) {
            result.push({
              path: {
                test: filePath,
                target: targetPath
              },
              error: error,
              result: testResult
            });
            return nextDone();
          };
          filePath = tmp_filePath;
          if (hasJsExtension(filePath)) {
            targetPath = getTargetPath(filePath);
            return fileExists(targetPath).then(function() {
              var handler, returnValue, testFn;
              handler = require(filePath);
              if (typeof handler === 'function') {
                testFn = f_testFn();
                returnValue = new Promise(function(resolve, reject) {
                  var error;
                  try {
                    return Promise.resolve(handler(targetPath, testFn)).then(function() {
                      return resolve(testFn.result);
                    });
                  } catch (_error) {
                    error = _error;
                    return reject(error);
                  }
                });
              } else {
                returnValue = handler;
              }
              return Promise.resolve(returnValue).then(validateTestOutput).then(function(output) {
                return [null, output];
              }, function(error) {
                return [error];
              }).then(function(currentResult) {
                return pushToResult(currentResult[0], currentResult[1]);
              });
            }, function() {
              return pushToResult(new Error('Target file doesn\'t exists'));
            });
          } else {
            return nextDone();
          }
        };
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          tmp_filePath = files[_i];
          _fn();
        }
        return result;
      });
    });
  };

}).call(this);
