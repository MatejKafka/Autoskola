// Generated by CoffeeScript 1.11.1
(function() {
  var args, chalk, contains, cp, env, fs, getPossibleDirs, ignoreDottedFiles, installInDir, installInRootDir, installNestedModules, noop, path;

  fs = require('fs');

  path = require('path');

  cp = require('child_process');

  try {
    chalk = require('chalk');
  } catch (error) {
    try {
      cp.spawnSync('npm', ['install'], {
        cwd: __dirname
      });
      chalk = require('chalk');
    } catch (error) {
      console.log('COLORS DISABLED - `chalk` NOT INSTALLED');
      noop = function(arg) {
        return arg;
      };
      chalk = {
        redBright: noop,
        yellow: noop,
        green: noop
      };
    }
  }

  getPossibleDirs = function(dir, ignoreDottedDirs) {
    var fileName, files, i, len, out;
    if (ignoreDottedDirs == null) {
      ignoreDottedDirs = true;
    }
    files = fs.readdirSync(dir);
    out = [];
    for (i = 0, len = files.length; i < len; i++) {
      fileName = files[i];
      if (fileName !== 'node_modules' && fs.statSync(path.resolve(dir, fileName)).isDirectory()) {
        if (ignoreDottedDirs && fileName[0] === '.') {
          continue;
        }
        out.push(fileName);
      }
    }
    return out;
  };

  installInDir = function(dir, relPath, env) {
    var envVar, result;
    envVar = process.env;
    switch (env) {
      case 'dev':
      case 'development':
        envVar.NODE_ENV = 'development';
        break;
      case 'prod':
      case 'production':
        envVar.NODE_ENV = 'production';
        break;
      case null:
      case void 0:
        break;
      default:
        throw new Error("Invalid `env` value: " + env);
    }
    result = cp.spawnSync('npm', ['install'], {
      shell: true,
      cwd: dir,
      env: envVar,
      encoding: 'utf8'
    });
    if (result.status !== 0) {
      if (result.stderr.slice(-1) === '\n') {
        result.stderr = result.stderr.slice(0, -1);
      }
      console.error(chalk.redBright("Error occurred while installing modules in " + (relPath.replace(/\\/g, '/')) + " (absolute: " + (dir.replace(/\\/g, '/')) + "):"));
      console.error(chalk.redBright('\t' + result.stderr.replace(/\n/g, '\n\t')));
    } else {
      if (result.stderr.length > 0) {
        if (result.stderr.slice(-1) === '\n') {
          result.stderr = result.stderr.slice(0, -1);
        }
        console.warn(chalk.yellow('Following problems with your package.json were found: '));
        console.warn(chalk.yellow('\t' + result.stderr.replace(/\n/g, '\n\t')));
      }
      console.log(chalk.green("Successfully installed modules in " + (relPath.replace(/\\/g, '/')) + " (absolute: " + (dir.replace(/\\/g, '/')) + ")"));
    }
    console.log('');
  };

  installNestedModules = function(dir, env, ignoreDottedDirs, topLevelDir, installInCurrentDir) {
    var i, len, relPath, subdir, subdirs;
    if (env == null) {
      env = null;
    }
    if (ignoreDottedDirs == null) {
      ignoreDottedDirs = true;
    }
    if (topLevelDir == null) {
      topLevelDir = null;
    }
    if (installInCurrentDir == null) {
      installInCurrentDir = false;
    }
    if (!topLevelDir) {
      topLevelDir = dir;
    }
    if (installInCurrentDir && fs.existsSync(path.resolve(dir, 'package.json'))) {
      relPath = './' + path.relative(topLevelDir, dir);
      console.log(chalk.green("Installing in " + (relPath.replace(/\\/g, '/')) + " (absolute: " + (dir.replace(/\\/g, '/')) + ")"));
      installInDir(dir, relPath, env);
    }
    subdirs = getPossibleDirs(dir, ignoreDottedDirs);
    for (i = 0, len = subdirs.length; i < len; i++) {
      subdir = subdirs[i];
      installNestedModules(path.resolve(dir, subdir), env, ignoreDottedDirs, topLevelDir, true);
    }
  };

  module.exports = function(rootDir, options) {
    var env, ignoreDottedDirs, installInRootDir;
    if (typeof options !== 'object') {
      options = {};
    }
    env = options.env, ignoreDottedDirs = options.ignoreDottedDirs, installInRootDir = options.installInRootDir;
    installNestedModules(rootDir, env, ignoreDottedDirs, null, installInRootDir);
  };

  if (require.main === module) {
    args = process.argv.slice(2);
    contains = function(param) {
      return args.indexOf('--' + param) >= 0;
    };
    ignoreDottedFiles = !contains('readDottedFiles');
    installInRootDir = contains('installRoot');
    if (contains('dev') || contains('development')) {
      env = 'development';
    } else if (contains('prod') || contains('production')) {
      env = 'production';
    } else {
      env = null;
    }
    installNestedModules(path.resolve(), env, ignoreDottedFiles, null, installInRootDir);
  }

}).call(this);

//# sourceMappingURL=index.js.map
